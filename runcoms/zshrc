# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# functions
refresh-env() {
  local socket_path="$(tmux show-environment | sed -n 's/^SSH_AUTH_SOCK=//p')"

  if ! [[ "$socket_path" ]]; then
    echo 'no socket path' >&2
    return 1
  else
    export SSH_AUTH_SOCK="$socket_path"
  fi
}

kill-server() {
  local pid=$(lsof -Pwni tcp | sed 1d | eval "fzf ${FZF_DEFAULT_OPTS} -m --header='[kill:tcp]'" | awk '{print $2}')

  if [ "x$pid" != "x" ]; then
    echo $pid | xargs kill -${1:-9}
  fi
}

ff() {
    if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
    local file
    file="$(rg --max-count=1 --ignore-case --files-with-matches --no-messages "$*" | fzf +m --preview="rg --ignore-case --pretty --context 10 '"$*"' {}")" && \
      "$VISUAL" "$file" || \
      return 1
}

__source_if_exists() {
  [[ -f "$1" ]] && source "$1"
}

# complete pass **<TAB>
_fzf_complete_pass() {
  local store="$HOME/.password-store"
  _fzf_complete --multi --reverse --prompt="pass> " -- "$@" < <(
    fd -e gpg -t file -c never . "$store" | sed "s|$store/\(.*\)\.gpg$|\\1|"
  )
}

__source_if_exists /usr/share/fzf/key-bindings.zsh
__source_if_exists /usr/share/fzf/completion.zsh
__source_if_exists /usr/share/doc/fzf/examples/key-bindings.zsh
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
__source_if_exists ~/.p10k.zsh

# dot files
alias config='git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'
alias vim=nvim
alias emacs='emacs -nw'
alias e="emacsclient -nw"
alias rust=evcxr

HISTSIZE=50000
SAVEHIST=50000

EDITOR=vim
VISUAL="$HOME/bin/e.sh"

[[ -z $SSH_CONNECTION ]] && export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"

[[ -d "$HOME/.cargo/bin" ]] && export PATH="$PATH:$HOME/.cargo/bin"

# asdf version manager
ASDF_DIR="$HOME/.asdf"
# setup some additional completions
[[ -d "$ASDF_DIR" ]] && fpath=("$ASDF_DIR/completions" $fpath)
[[ -f "$ASDF_DIR/asdf.sh" ]] && source "$ASDF_DIR/asdf.sh"
